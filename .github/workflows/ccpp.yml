name: C/C++ CI

on:
  push:
    paths:
      - 'src/**'
      - '.github/workflows/ccpp.yml'
  pull_request:
    paths:
      - 'src/**'
      - '.github/workflows/ccpp.yml'
  schedule:
    # Every day at 1am UTC
    - cron: '0 1 * * *'

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        # platform: [Win32, x64]
        platform: [x64]
        runtime_link: [MD, MT]
    env:
      build_dir: ./src/build
      dist_dir: ./src/local_third_party
      build_deps: OFF
      static_runtime: ON
      automaton_version: v0.1.15
    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.0
      with:
        cmake-version: '3.17.x'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Use cmake
      run: cmake --version
    - uses: actions/checkout@v2
    - name: Check for full rebuild
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'
      run: |
        echo "::set-env name=build_deps::ON"
      shell: bash
    - name: Check for runtime link option
      if: matrix.runtime_link == 'MD'
      run: |
        echo "::set-env name=static_runtime::OFF"
      shell: bash
    - name: Get tag information
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      id: tag
      uses: actions/github-script@0.9.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '');
    - name: Install build dependencies
      run: choco install zip
    - name: prepare
      run: |
        mkdir ${{ env.build_dir }}
        mkdir ${{ env.dist_dir }}
    - name: Fetch dependencies
      if: startsWith(env.build_deps, 'OFF')
      working-directory: ${{ env.dist_dir }}
      run: |
        curl -L -O https://github.com/automaton-network/automaton-core/releases/download/${{ env.automaton_version }}/automaton-Windows-${{ matrix.configuration }}-${{ matrix.runtime_link }}-${{ matrix.platform }}-${{ env.automaton_version }}.zip
        unzip automaton-Windows-${{ matrix.configuration }}-${{ matrix.runtime_link }}-${{ matrix.platform }}-${{ env.automaton_version }}.zip -x "include/automaton-core/*"
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.0
    - name: configure
      working-directory: ${{ env.build_dir }}
      run: cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -A ${{ matrix.platform }} -Dautomaton_STATIC_RUNTIME=${{ env.static_runtime }} -Dautomaton_BUILD_DEPENDENCIES=${{ env.build_deps }} -DCMAKE_INSTALL_PREFIX=../local_third_party
      shell: cmd
    - name: build
      working-directory: ${{ env.build_dir }}
      run: msbuild /t:Build INSTALL.vcxproj /p:Configuration=${{ matrix.configuration }} /p:Platform=${{ matrix.platform }}
      shell: cmd
    - name: test
      working-directory: ${{ env.build_dir }}
      run: ctest -j4 -C ${{ matrix.configuration }}
      shell: cmd
    - name: Archive
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      working-directory: ${{ env.dist_dir }}
      run: zip -r ../../automaton-Windows-${{ matrix.configuration}}-${{ matrix.runtime_link}}-${{ matrix.platform}}-${{ steps.tag.outputs.result }}.zip .
      shell: cmd
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      with:
        files: automaton-Windows-${{ matrix.configuration }}-${{ matrix.runtime_link}}-${{ matrix.platform}}-${{ steps.tag.outputs.result }}.zip
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    env:
      build_dir: ./src/build
      dist_dir: ./src/local_third_party
      test_contracts_dir: ./contracts/test_contract
      build_deps: OFF
      automaton_version: v0.1.15
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.0
      with:
        cmake-version: '3.17.x'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Use cmake
      run: cmake --version
    - uses: actions/checkout@v2
    - name: Check for full rebuild
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'
      run: |
           echo "::set-env name=build_deps::ON"
      shell: bash
    - name: Get tag information
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      id: tag
      uses: actions/github-script@0.9.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '');
    - name: prepare
      run: |
        mkdir ${{ env.build_dir }}
        mkdir ${{ env.dist_dir }}
    - name: Fetch dependencies
      if: startsWith(env.build_deps, 'OFF')
      working-directory: ${{ env.dist_dir }}
      run: |
        curl -L -O https://github.com/automaton-network/automaton/releases/download/${{ env.automaton_version }}/automaton-Linux-${{ matrix.configuration }}-${{ env.automaton_version }}.zip
        unzip automaton-Linux-${{ matrix.configuration }}-${{ env.automaton_version }}.zip -x "include/automaton/*"
    - name: configure
      working-directory: ${{ env.build_dir }}
      run: cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -Dautomaton_BUILD_DEPENDENCIES=${{ env.build_deps }} -DCMAKE_INSTALL_PREFIX=../local_third_party -Dautomaton_RUN_GANACHE_TESTS=ON
    - name: build
      working-directory: ${{ env.build_dir }}
      run: make install
    - name: Use Node.js 10.x
      uses: actions/setup-node@v1
      with:
        node-version: 10.x
    - run: npm i -g ganache-cli truffle
      working-directory: ${{ env.test_contracts_dir }}
    - name: Setup Ganache
      run: ganache-cli -m 'myth like bonus scare over problem client lizard pioneer submit female collect' -p 7545 -e 10000 &
      working-directory: ${{ env.test_contracts_dir }}
    - name: Deploy contract
      run: truffle --network ganache deploy --reset
      working-directory: ${{ env.test_contracts_dir }}
    - name: test
      working-directory: ${{ env.build_dir }}
      run: ctest -j4 -C ${{ matrix.configuration }} --build-run-dir=..
    - name: Archive
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      working-directory: ${{ env.dist_dir }}
      run: zip -r ../../automaton-Linux-${{ matrix.configuration}}-${{ steps.tag.outputs.result }}.zip .
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      with:
        files: automaton-Linux-${{ matrix.configuration }}-${{ steps.tag.outputs.result }}.zip
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
    env:
      build_dir: ./src/build
      lint_dir: ./src/automaton
      dist_dir: ./src/local_third_party
      build_deps: OFF
      automaton_version: v0.1.15
      MACOSX_DEPLOYMENT_TARGET: 10.9
    steps:
    - name: Setup cmake
      uses: jwlawson/actions-setup-cmake@v1.0
      with:
        cmake-version: '3.17.x'
        github-api-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Use cmake
      run: cmake --version
    - uses: actions/checkout@v2
    - name: Check for full rebuild
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'schedule'
      run: |
           echo "::set-env name=build_deps::ON"
      shell: bash
    - name: Get tag information
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      id: tag
      uses: actions/github-script@0.9.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          return context.payload.ref.replace(/refs\/tags\//, '');
    - name: Install build dependencies
      run: brew install autoconf automake libtool
    - name: prepare
      run: |
        mkdir ${{ env.build_dir }}
        mkdir ${{ env.dist_dir }}
    - name: Fetch dependencies
      if: startsWith(env.build_deps, 'OFF')
      working-directory: ${{ env.dist_dir }}
      run: |
        curl -L -O https://github.com/automaton-network/automaton/releases/download/${{ env.automaton_version }}/automaton-macOS-${{ matrix.configuration }}-${{ env.automaton_version }}.zip
        unzip automaton-macOS-${{ matrix.configuration }}-${{ env.automaton_version }}.zip -x "include/automaton/*"
    - name: configure
      working-directory: ${{ env.build_dir }}
      run: cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.configuration }} -Dautomaton_BUILD_DEPENDENCIES=${{ env.build_deps }} -DCMAKE_INSTALL_PREFIX=../local_third_party
    - name: build
      working-directory: ${{ env.build_dir }}
      run: make install
    - name: test
      working-directory: ${{ env.build_dir }}
      run: ctest -j4 -C ${{ matrix.configuration }}
    - name: Archive
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      working-directory: ${{ env.dist_dir }}
      run: zip -r ../../automaton-macOS-${{ matrix.configuration}}-${{ steps.tag.outputs.result }}.zip .
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/v') && github.event_name != 'schedule'
      with:
        files: automaton-macOS-${{ matrix.configuration }}-${{ steps.tag.outputs.result }}.zip
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
